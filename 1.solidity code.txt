pragma solidity >=0.5.0 <0.6.0;  // need to provide the version which we are using in solidity, in this case it is >=0.5.0 <0.6.0.

contract ZombieFactory {

    
    event NewZombie(uint zombieId, string name, uint dna);  //declaring event, it it like javascript to notify or do anything when something happens, so created an event which will be
							    //emitted when a new zombie is created (newzombie will be created in _newZombie function and from that we will emit this event).
    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {  //struture of Zombie
        string name;
        uint dna;
    }

    Zombie[] public zombies;  // array containing all the data of Zombie strust type.

    function _createZombie(string memory _name, uint _dna) private {  // created function to create zombie, in parameter memory keyword is used to have reference value(original value).
        uint id = zombies.push(Zombie(_name, _dna)) - 1;             //id is the index of new zombie created which is the length of array.
        // and fire it here
        emit NewZombie(id, _name, _dna);			     // emitting the event here as after the zombie is added, we will emit the event or notify in the frontend.
    }

    function _generateRandomDna(string memory _str) private view returns (uint) {  // here, view is used in the function parameter because no data will be altered and only read data 
        uint rand = uint(keccak256(abi.encodePacked(_str)));                       // permission is given, keccak256 is used to generate hash value which is string and converted to unit.
        return rand % dnaModulus;
    }

    function createRandomZombie(string memory _name) public {      // here in this function other two functions are called. 
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

}
